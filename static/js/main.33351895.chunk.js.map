{"version":3,"sources":["services/initService.js","components/ChatBoard.js","components/ChatButton.js","App.js","serviceWorker.js","index.js"],"names":["service","fetch","then","response","json","ChatBoard","props","state","show","console","log","this","className","showBoard","style","background","primaryColor","src","alt","href","Component","defaultProps","ChatButton","handleButton","onClick","App","e","setState","secondaryColor","getConf","data","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0OAEaA,G,MAAU,CAEvBA,QAAkB,WAChB,OAAOC,MAAM,iCAAiCC,MAAK,SAACC,GAClD,OAAOA,EAASC,aCAdC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,gBACKC,MAAQ,CAAEC,MAAM,GAFJ,E,qDAMjB,OADAC,QAAQC,IAAIC,KAAKJ,MAAMC,MAErB,yBAAKI,UAAS,gBAAWD,KAAKL,MAAMO,UAAY,QAAU,SACxD,yBAAKD,UAAU,SAASE,MAAO,CAAEC,WAAYJ,KAAKL,MAAMU,eACtD,yBAAKJ,UAAU,oBACb,yBACEK,IAAI,uCACJC,IAAI,GACJN,UAAU,eAId,yBAAKA,UAAU,iBACb,sCACA,0GAMJ,yBAAKA,UAAU,QACb,yBAAKA,UAAU,qBACb,6CACA,uBAAGO,KAAK,IAAR,cAEF,yBAAKP,UAAU,sBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,QACb,yBAAKK,IAAI,uCAAuCC,IAAI,KACpD,8BACE,uCACA,4CAGJ,uCAEF,yBAAKN,UAAU,OACf,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,QACb,yBAAKK,IAAI,uCAAuCC,IAAI,KACpD,8BACE,uCACA,4CAGJ,wCAGJ,4BACEN,UAAU,cACVE,MAAO,CAAEC,WAAYJ,KAAKL,MAAMU,eAEhC,uBAAGJ,UAAU,yCAJf,mBAQF,yBAAKA,UAAU,UACb,uBAAGA,UAAU,8BACb,yD,GAhEcQ,aAuExBf,EAAUgB,aAAe,CACvBL,aAAc,WAEDX,QC7DAiB,E,uKAdH,IACAC,EAAiBZ,KAAKL,MAAtBiB,aACR,OACE,4BACEX,UAAU,MACVY,QAASD,EACTT,MAAO,CAAEC,WAAYJ,KAAKL,MAAMU,eAHlC,sB,GAJmBI,aCiDVK,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAOFF,aAAe,SAACG,GACd,EAAKC,SAAS,CAAEd,WAAY,EAAKN,MAAMM,aAPvC,EAAKN,MAAQ,CACXM,UAAW,GACXG,aAAc,UACdY,eAAgB,WALN,E,gEAYO,IAAD,OAClB5B,EACG6B,UACA3B,MAAK,SAAC4B,GAAD,OAAU,EAAKH,SAAS,CAAEX,aAAcc,EAAKC,a,+BAIrD,OACE,yBAAKnB,UAAU,OACb,yBACEA,UAAS,yBACPD,KAAKJ,MAAMM,UAAY,kBAAoB,KAG7C,yBAAKD,UAAS,uBAAkBD,KAAKJ,MAAMM,UAAY,OAAS,KAC9D,8CACA,4DAEF,kBAAC,EAAD,CACEG,aAAcL,KAAKJ,MAAMS,aACzBH,UAAWF,KAAKJ,MAAMM,YAExB,kBAAC,EAAD,CACEU,aAAcZ,KAAKY,aACnBP,aAAcL,KAAKJ,MAAMS,qB,GArCnBI,aCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.33351895.chunk.js","sourcesContent":["/** @format */\r\n\r\nexport const service = {};\r\n\r\nservice.getConf = () => {\r\n  return fetch('http://localhost:4000/example').then((response) => {\r\n    return response.json();\r\n  });\r\n};\r\n\r\n// export default service;\r\n","/** @format */\r\n\r\nimport React, { Component } from 'react';\r\n\r\n// const show = false;\r\n\r\nclass ChatBoard extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = { show: false };\r\n  }\r\n  render() {\r\n    console.log(this.state.show);\r\n    return (\r\n      <div className={`board ${this.props.showBoard ? 'board' : 'hide'}`}>\r\n        <div className='header' style={{ background: this.props.primaryColor }}>\r\n          <div className='header-operators'>\r\n            <img\r\n              src='https://picsum.photos/id/237/100/100'\r\n              alt=''\r\n              className='operators'\r\n            />\r\n          </div>\r\n\r\n          <div className='board-message'>\r\n            <h4>Tittle</h4>\r\n            <span>\r\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Animi,\r\n              optio.\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className='chat'>\r\n          <div className='historical-header'>\r\n            <p>Conversaciones</p>\r\n            <a href=''>Ver Todas</a>\r\n          </div>\r\n          <div className='historical-content'>\r\n            <div className='historical-item'>\r\n              <div className='left'>\r\n                <img src='https://picsum.photos/id/237/100/100' alt='' />\r\n                <span>\r\n                  <p> Empresa</p>\r\n                  <p>tu: mensaje</p>\r\n                </span>\r\n              </div>\r\n              <span>date</span>\r\n            </div>\r\n            <div className='hr'></div>\r\n            <div className='historical-item'>\r\n              <div className='left'>\r\n                <img src='https://picsum.photos/id/237/100/100' alt='' />\r\n                <span>\r\n                  <p> Empresa</p>\r\n                  <p>tu: mensaje</p>\r\n                </span>\r\n              </div>\r\n              <span>date</span>\r\n            </div>\r\n          </div>\r\n          <button\r\n            className='btn btn-msj'\r\n            style={{ background: this.props.primaryColor }}\r\n          >\r\n            <i className='fas fa-chevron-circle-right msj-icon'></i>\r\n            Enviar Mensaje\r\n          </button>\r\n        </div>\r\n        <div className='footer'>\r\n          <i className='fas fa-exclamation-circle'></i>\r\n          <span>Powered by Tikket</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nChatBoard.defaultProps = {\r\n  primaryColor: '#1f82ff',\r\n};\r\nexport default ChatBoard;\r\n","/** @format */\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass ChatButton extends Component {\r\n  render() {\r\n    const { handleButton } = this.props;\r\n    return (\r\n      <button\r\n        className='btn'\r\n        onClick={handleButton}\r\n        style={{ background: this.props.primaryColor }}\r\n      >\r\n        Call to Action\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatButton;\r\n","/** @format */\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport { service } from './services/initService';\nimport ChatBoard from './components/ChatBoard';\nimport ChatButton from './components/ChatButton';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showBoard: '',\n      primaryColor: '#1082ff',\n      secondaryColor: '#ffffff',\n    };\n  }\n  handleButton = (e) => {\n    this.setState({ showBoard: !this.state.showBoard });\n  };\n\n  componentDidMount() {\n    service\n      .getConf()\n      .then((data) => this.setState({ primaryColor: data.color }));\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div\n          className={`chat-container ${\n            this.state.showBoard ? 'hide-background' : ''\n          }`}\n        >\n          <div className={`chat-message ${this.state.showBoard ? 'hide' : ''}`}>\n            <h1>Call To Action</h1>\n            <h4>Lorem ipsum dolor sit amet.</h4>\n          </div>\n          <ChatBoard\n            primaryColor={this.state.primaryColor}\n            showBoard={this.state.showBoard}\n          />\n          <ChatButton\n            handleButton={this.handleButton}\n            primaryColor={this.state.primaryColor}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}